'use strict';

const sirv = require('sirv');
const path = require('node:path');
const fs = require('node:fs');
const chokidar = require('chokidar');
const colors = require('picocolors');
const url = require('url');
const fg = require('fast-glob');
const Mock = require('mockjs');
const pathToRegexp = require('path-to-regexp');
const bundleRequire = require('bundle-require');
const path$1 = require('path');
const node_url = require('node:url');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e.default : e; }

const sirv__default = /*#__PURE__*/_interopDefaultCompat(sirv);
const path__default = /*#__PURE__*/_interopDefaultCompat(path);
const fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
const chokidar__default = /*#__PURE__*/_interopDefaultCompat(chokidar);
const colors__default = /*#__PURE__*/_interopDefaultCompat(colors);
const url__default = /*#__PURE__*/_interopDefaultCompat(url);
const fg__default = /*#__PURE__*/_interopDefaultCompat(fg);
const Mock__default = /*#__PURE__*/_interopDefaultCompat(Mock);

const toString = Object.prototype.toString;
function is(val, type) {
  return toString.call(val) === `[object ${type}]`;
}
function isFunction(val) {
  return is(val, "Function") || is(val, "AsyncFunction");
}
function isArray(val) {
  return val && Array.isArray(val);
}
function isRegExp(val) {
  return is(val, "RegExp");
}
function isAbsPath(path) {
  if (!path) {
    return false;
  }
  if (/^([a-zA-Z]:\\|\\\\|(?:\/|\uFF0F){2,})/.test(path)) {
    return true;
  }
  return /^\/[^/]/.test(path);
}
function sleep(time) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("");
    }, time);
  });
}

const excludeMock = /* @__PURE__ */ new Set();
let mockData = [];
async function createMockServer(opt = { mockPath: "mock", configPath: "vite.mock.config" }, config) {
  opt = {
    mockPath: "mock",
    watchFiles: true,
    configPath: "vite.mock.config.ts",
    logger: true,
    cors: true,
    ...opt
  };
  if (mockData.length > 0)
    return;
  mockData = await getMockConfig(opt, config);
  await createWatch(opt, config);
}
async function requestMiddleware(opt) {
  const { logger = true } = opt;
  const middleware = async (req, res, next) => {
    let queryParams = {};
    if (req.url) {
      queryParams = url__default.parse(req.url, true);
    }
    const reqUrl = queryParams.pathname;
    const matchRequest = mockData.find((item) => {
      if (excludeMock.has(`${item.url}+${item.method || "get"}`)) {
        return false;
      }
      if (!reqUrl || !item || !item.url) {
        return false;
      }
      if (item.method && item.method.toUpperCase() !== req.method) {
        return false;
      }
      return pathToRegexp.pathToRegexp(item.url).test(reqUrl);
    });
    if (matchRequest) {
      const isGet = req.method && req.method.toUpperCase() === "GET";
      const { response, rawResponse, timeout, statusCode, url: url2 } = matchRequest;
      if (timeout) {
        await sleep(timeout);
      }
      const urlMatch = pathToRegexp.match(url2, { decode: decodeURIComponent });
      let query = queryParams.query;
      if (reqUrl) {
        if (isGet && JSON.stringify(query) === "{}" || !isGet) {
          const params = urlMatch(reqUrl).params;
          if (JSON.stringify(params) !== "{}") {
            query = urlMatch(reqUrl).params || {};
          } else {
            query = queryParams.query || {};
          }
        }
      }
      const self = { req, res, parseJson: parseJson.bind(null, req) };
      if (isFunction(rawResponse)) {
        await rawResponse.bind(self)(req, res);
      } else {
        const body = await parseJson(req);
        res.setHeader("Content-Type", "application/json");
        if (opt) {
          res.setHeader("Access-Control-Allow-Credentials", "true");
          res.setHeader("Access-Control-Allow-Origin", req.headers.origin || "*");
        }
        res.statusCode = statusCode || 200;
        const mockResponse = isFunction(response) ? response.bind(self)({ url: req.url, body, query, headers: req.headers }) : response;
        res.end(JSON.stringify(Mock__default.mock(mockResponse)));
      }
      logger && loggerOutput("request invoke", req.url);
      return;
    }
    next();
  };
  return middleware;
}
function createWatch(opt, config) {
  const { configPath, logger, watchFiles } = opt;
  if (!watchFiles) {
    return;
  }
  const { absConfigPath, absMockPath } = getPath(opt);
  if (process.env.VITE_DISABLED_WATCH_MOCK === "true") {
    return;
  }
  const watchDir = [];
  const exitsConfigPath = fs__default.existsSync(absConfigPath);
  exitsConfigPath && configPath ? watchDir.push(absConfigPath) : watchDir.push(absMockPath);
  const watcher = chokidar__default.watch(watchDir, {
    ignoreInitial: true,
    // ignore files generated by `bundle require`
    ignored: "**/_*.bundled_*.(mjs|cjs)"
  });
  watcher.on("all", async (event, file) => {
    logger && loggerOutput(`mock file ${event}`, file);
    mockData = await getMockConfig(opt, config);
  });
}
function parseJson(req) {
  return new Promise((resolve) => {
    let body = "";
    let jsonStr = "";
    req.on("data", function(chunk) {
      body += chunk;
    });
    req.on("end", function() {
      try {
        jsonStr = JSON.parse(body);
      } catch (err) {
        jsonStr = "";
      }
      resolve(jsonStr);
      return;
    });
  });
}
async function getMockConfig(opt, config) {
  const { absConfigPath, absMockPath } = getPath(opt);
  const { ignore, configPath, logger } = opt;
  let ret = [];
  if (configPath && fs__default.existsSync(absConfigPath)) {
    logger && loggerOutput(`load mock data from`, absConfigPath);
    ret = await resolveModule(absConfigPath, config);
    return ret;
  }
  const mockFiles = fg__default.sync(`**/*.{ts,mjs,js}`, {
    cwd: absMockPath
  }).filter((item) => {
    if (!ignore) {
      return true;
    }
    if (isFunction(ignore)) {
      return !ignore(item);
    }
    if (isRegExp(ignore)) {
      return !ignore.test(path__default.basename(item));
    }
    return true;
  });
  try {
    ret = [];
    const resolveModulePromiseList = [];
    for (let index = 0; index < mockFiles.length; index++) {
      const mockFile = mockFiles[index];
      resolveModulePromiseList.push(resolveModule(path__default.join(absMockPath, mockFile), config));
    }
    const loadAllResult = await Promise.all(resolveModulePromiseList);
    for (const resultModule of loadAllResult) {
      let mod = resultModule;
      if (!isArray(mod)) {
        mod = [mod];
      }
      ret = [...ret, ...mod];
    }
  } catch (error) {
    loggerOutput(`mock reload error`, error);
    ret = [];
  }
  return ret;
}
const getOutputFile = (filepath, format) => {
  const dirname = path__default.dirname(filepath);
  const basename = path__default.basename(filepath);
  const randomname = `${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;
  return path__default.resolve(
    dirname,
    `_${basename.replace(bundleRequire.JS_EXT_RE, `.bundled_${randomname}.${format === "esm" ? "mjs" : "cjs"}`)}`
  );
};
async function resolveModule(p, config) {
  const mockData2 = await bundleRequire.bundleRequire({
    filepath: p,
    getOutputFile
  });
  let mod = mockData2.mod.default || mockData2.mod;
  if (isFunction(mod)) {
    mod = await mod({ env: config.env, mode: config.mode, command: config.command });
  }
  return mod;
}
function getPath(opt) {
  const { mockPath, configPath } = opt;
  const cwd = process.cwd();
  const absMockPath = isAbsPath(mockPath) ? mockPath : path__default.join(cwd, mockPath || "");
  const absConfigPath = path__default.join(cwd, configPath || "");
  return {
    absMockPath,
    absConfigPath
  };
}
function loggerOutput(title, msg, type = "info") {
  const tag = type === "info" ? colors__default.cyan(`[vite:mock]`) : colors__default.red(`[vite:mock-server]`);
  return console.log(
    `${colors__default.dim(( new Date()).toLocaleTimeString())} ${tag} ${colors__default.green(title)} ${colors__default.dim(
      msg
    )}`
  );
}

(async () => {
  try {
    await import('mockjs');
  } catch (e) {
    throw new Error("vite-plugin-vue-mock requires mockjs to be present in the dependency tree.");
  }
})();
const DIR_CLIENT = path$1.resolve(
  typeof __dirname !== "undefined" ? __dirname : path$1.dirname(
    node_url.fileURLToPath((typeof document === 'undefined' ? require('u' + 'rl').pathToFileURL(__filename).href : (document.currentScript && document.currentScript.src || new URL('index.cjs', document.baseURI).href)))
  ),
  "../dist/inspect"
);
function viteMockServe(opt = {}) {
  let isDev = false;
  let config;
  return {
    name: "vite:mock",
    enforce: "pre",
    configResolved(resolvedConfig) {
      config = resolvedConfig;
      isDev = config.command === "serve";
      isDev && createMockServer(opt, config);
    },
    configureServer: async ({ middlewares }) => {
      const { enable = isDev } = opt;
      if (!enable) {
        return;
      }
      const middleware = await requestMiddleware(opt);
      middlewares.use(middleware);
      middlewares.use("/__mockInspect/list", (req, res, next) => {
        res.end(
          JSON.stringify(
            mockData.map((i) => {
              return {
                ...i,
                exclude: excludeMock.has(`${i.url}+${i.method || "get"}`)
              };
            })
          )
        );
      });
      middlewares.use("/__mockInspect/exclude", (req, res, next) => {
        const isPost = req.method && req.method.toUpperCase() === "POST";
        if (isPost) {
          parseJson(req).then((body) => {
            if (body && body.urlList) {
              excludeMock.clear();
              body.urlList.forEach((url) => {
                excludeMock.add(url);
              });
              res.end(JSON.stringify({ code: 0 }));
            } else {
              next();
            }
          });
        } else {
          next();
        }
      });
      middlewares.use(
        "/__mockInspect",
        sirv__default(DIR_CLIENT, {
          single: true,
          dev: true
        })
      );
    }
  };
}

exports.viteMockServe = viteMockServe;
